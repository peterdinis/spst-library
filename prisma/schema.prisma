// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
     previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Book {
    id           Int       @id @default(autoincrement())
    name         String
    description  String
    image        String
    year         String
    pages        Int
    isAvaiable   Boolean   @default(true)
    itemsInStock Int
    category     Category  @relation(fields: [categoryId], references: [id], onDelete: NoAction)
    categoryId   Int
    publisher    Publisher @relation(fields: [publisherId], references: [id], onDelete: NoAction)
    author       Author    @relation(fields: [authorId], references: [id],  onDelete: NoAction)
    authorId     Int
    publisherId  Int
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @default(now()) @updatedAt
}

model Category {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    books       Book[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
}

model Publisher {
    id           Int       @id @default(autoincrement())
    name         String
    image        String    @default("")
    description  String    @default("")
    createdDated DateTime  @default(now())
    endDate      DateTime? // Ak vydavateľstvo nie je už aktívne
    isActive     Boolean   @default(true)
    books        Book[]
    bossName     String    @default("")
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @default(now()) @updatedAt
}

model Author {
    id          Int      @id @default(autoincrement())
    name        String
    deathYear   String?
    birthYear   String
    description String
    litPeriod   String
    totalBooks  Int
    authorImage String   @default("")
    books       Book[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
}

model Booking {
    id            Int      @id @default(autoincrement())
    bookName      String
    from          DateTime
    to            DateTime
    isBorrowed    Boolean
    isReturned    Boolean
    isExtended    Boolean? // Predlženie knihy
    userEmail     String
}